1)
N = 128
Birthday attack:
Probability of collision with q inputs: Pr(q) = 1 - e ^ ((-q(q-1)) / (2N)) = 1 – e ^((-q(q-1)) / 256)
Lowest q such that Pr(q) > .999: q=43 (q=50 for .9999, q=55 for .99999)
At q=99, Pr(q) is too close to 1 for a computer to store the difference.
Birthday attack will break H in time 2^64, which, using the formula in the slides, is 23382 years, a really long time. But at least one collision will most likely be found in 99 tries.
=>
function find_collision(q)
	array encrypts
	for i = 1 to q:
		randomInput = generateRandomeInput() //get a valid input that hasn't been used yet
		cipher = H(randomInput)
		if encrypts contains cipher:
			return the two random inputs that collided
		else:
			add cipher to encrypts
		
2)
The keyless hash function will take in a string of ascii characters. These characters will be split into blocks of either 2 bits, 4 bits, or multiple characters. If the number of characters is odd, the first character in the string is repeated as the last character. Each block's parity is computed by XORing the first half of the block with the second half repeatedly, until 1 bit remains. Each block's parity is concatenated into a binary string z. An random S-Box is constructed with m1=|z|/4 (integer division) rows and m2=|z|-m1 columns. The first m1 bits of z are used as the row lookup, and the remaining m2 bits of z for the column lookup. The entry found this way is the output of the function.

Exhaustive:
The exhaustive test runs an exhaustive search to find a collision on a random string multiple times(1,000 in this case). The test used inputs of 4 characters, or 32 bits, searching over the first 10,000 possibilities. This would normally require a higher search space, but I've found, most of the time, a collision is found in the first 10,000. After the 1,000 runs of the search, these results were returned (output of randomExhaustiveTest.py 0 10000 1000 4):

Found collision 1000 times out of 1000 runs of exhaustive search
Average number of tries when collision found: 885
Average number of tries over all 1000 runs: 885

The Sbox used in this test was 16x16 (since the input was 32 bits). I would say this hash function is trivial to break, since this test was able to find a collision for 1,000 inputs in 21 seconds. 
